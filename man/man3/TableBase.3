.TH "TableBase< T, N >" 3 "Thu Jul 1 2021" "Duke-Lido" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TableBase< T, N >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <TableBase\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBTableBase\fP (std::string, \fBSvec\fP, \fBDvec\fP, \fBDvec\fP)"
.br
.ti -1c
.RI "T \fBInterpolateTable\fP (\fBDvec\fP values)"
.br
.ti -1c
.RI "void \fBSetTableValue\fP (\fBSvec\fP index, T v)"
.br
.ti -1c
.RI "void \fBSetApproximateFunction\fP (T(*\fBf\fP)(\fBDvec\fP values))"
.br
.ti -1c
.RI "bool \fBSave\fP (std::string)"
.br
.ti -1c
.RI "bool \fBLoad\fP (std::string)"
.br
.ti -1c
.RI "size_t \fBshape\fP (size_t \fBi\fP)"
.br
.ti -1c
.RI "size_t \fBrank\fP (void)"
.br
.ti -1c
.RI "size_t \fBlength\fP (void)"
.br
.ti -1c
.RI "\fBDvec\fP \fBparameters\fP (\fBSvec\fP index)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "const std::string \fB_Name\fP"
.br
.ti -1c
.RI "const size_t \fB_rank\fP"
.br
.ti -1c
.RI "const size_t \fB_power_rank\fP"
.br
.ti -1c
.RI "\fBSvec\fP \fB_shape\fP"
.br
.ti -1c
.RI "\fBDvec\fP \fB_low\fP"
.br
.ti -1c
.RI "\fBDvec\fP \fB_high\fP"
.br
.ti -1c
.RI "\fBDvec\fP \fB_step\fP"
.br
.ti -1c
.RI "boost::multi_array< T, N > \fB_table\fP"
.br
.ti -1c
.RI "T(* \fBApproximateFunction\fP )(\fBDvec\fP values)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T, size_t N>
.br
class TableBase< T, N >"
The Basic table class: Tabulate type T output in an N-dimensional table Saving / loading to hdf5 format Interpolating, w/ or w/o an approximating function 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename T , size_t N> \fBTableBase\fP< T, N >::\fBTableBase\fP (std::string Name, \fBSvec\fP shape, \fBDvec\fP low, \fBDvec\fP high)"
Constructor, pass the nanem, shape, lower and upper bounds 
.SH "Member Function Documentation"
.PP 
.SS "template<typename T , size_t N> T \fBTableBase\fP< T, N >::InterpolateTable (\fBDvec\fP values)"
Table interpolator (not an extrapolator!), pass the values $ \{x,y,\cdots\} $ in a c++ vector Input point is cut-off beyond lower bounds or higher bounds
.PP
Use an $N$-dim linearly interpolation
.PP
It first interpolate the scaled table $ \tilde{F} = F[x_i]/f_{\rm approx} (x_i)$
.PP
and then, multiply the results by the value of the approximation function $ f_{\rm approx} (x)$
.SS "template<typename T , size_t N> size_t \fBTableBase\fP< T, N >::length (void)\fC [inline]\fP"

.SS "template<typename T , size_t N> bool \fBTableBase\fP< T, N >::Load (std::string fname)"
Load the table, it will check if the dimensional matches or not Mismatched table dimension will result in a fatal error
.SS "template<typename T , size_t N> \fBDvec\fP \fBTableBase\fP< T, N >::parameters (\fBSvec\fP index)\fC [inline]\fP"

.SS "template<typename T , size_t N> size_t \fBTableBase\fP< T, N >::rank (void)\fC [inline]\fP"

.SS "template<typename T , size_t N> bool \fBTableBase\fP< T, N >::Save (std::string fname)"
Save the table to file It will overwrite existing tables with the same name
.SS "template<typename T , size_t N> void \fBTableBase\fP< T, N >::SetApproximateFunction (T(*)(\fBDvec\fP values) f)\fC [inline]\fP"
Pass an approximate function for accurate interpoaltion 
.SS "template<typename T , size_t N> void \fBTableBase\fP< T, N >::SetTableValue (\fBSvec\fP index, T v)"
Set the value of an element by indices 
.SS "template<typename T , size_t N> size_t \fBTableBase\fP< T, N >::shape (size_t i)\fC [inline]\fP"

.SH "Member Data Documentation"
.PP 
.SS "template<typename T , size_t N> \fBDvec\fP \fBTableBase\fP< T, N >::_high\fC [protected]\fP"

.SS "template<typename T , size_t N> \fBDvec\fP \fBTableBase\fP< T, N >::_low\fC [protected]\fP"
Lower, upper bounds, and step size of the table in each dimension 
.SS "template<typename T , size_t N> const std::string \fBTableBase\fP< T, N >::_Name\fC [protected]\fP"
name of the table 
.SS "template<typename T , size_t N> const size_t \fBTableBase\fP< T, N >::_power_rank\fC [protected]\fP"

.SS "template<typename T , size_t N> const size_t \fBTableBase\fP< T, N >::_rank\fC [protected]\fP"
rank/dim ( $ N $) of the table, and size of a unit cube $ 2^N $ 
.SS "template<typename T , size_t N> \fBSvec\fP \fBTableBase\fP< T, N >::_shape\fC [protected]\fP"
shape of table $ \{n_1, n_2, ... n_N\}$ 
.SS "template<typename T , size_t N> \fBDvec\fP \fBTableBase\fP< T, N >::_step\fC [protected]\fP"

.SS "template<typename T , size_t N> boost::multi_array<T, N> \fBTableBase\fP< T, N >::_table\fC [protected]\fP"
N-dim data-table $ F[i,j,...] $ 
.SS "template<typename T , size_t N> T(* \fBTableBase\fP< T, N >::ApproximateFunction) (\fBDvec\fP values)\fC [protected]\fP"
an approximating function $f$ for more effeicient interpolation when the original / function varies a lot in certain regions / For example, if set, the interpolation will first interpolate the grid / $F[i,j]/f(x_i, x_j)$, and then multiple the final results by $f(x,y)$ 

.SH "Author"
.PP 
Generated automatically by Doxygen for Duke-Lido from the source code\&.
