<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="approx__functions_8cpp" kind="file" language="C++">
    <compoundname>approx_functions.cpp</compoundname>
    <includes refid="approx__functions_8h" local="yes">approx_functions.h</includes>
    <incdepgraph>
      <node id="5">
        <label>cmath</label>
      </node>
      <node id="4">
        <label>lorentz.h</label>
        <link refid="lorentz_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>approx_functions.h</label>
        <link refid="approx__functions_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
      <node id="1">
        <label>src/approx_functions.cpp</label>
        <link refid="approx__functions_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cstdlib</label>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="approx__functions_8cpp_1ab87410507bbb66283372d65be5e4f6a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structscalar" kindref="compound">scalar</ref></type>
        <definition>scalar approx_X22</definition>
        <argsstring>(std::vector&lt; double &gt; params)</argsstring>
        <name>approx_X22</name>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/approx_functions.cpp" line="4" column="8" bodyfile="src/approx_functions.cpp" bodystart="4" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="approx__functions_8cpp_1a12661202ee9977209862664033a009a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structscalar" kindref="compound">scalar</ref></type>
        <definition>scalar approx_X22QQbar</definition>
        <argsstring>(std::vector&lt; double &gt; params)</argsstring>
        <name>approx_X22QQbar</name>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/approx_functions.cpp" line="10" column="8" bodyfile="src/approx_functions.cpp" bodystart="10" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="approx__functions_8cpp_1a428f5413e417cc9749e53e31dd8e2d11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structscalar" kindref="compound">scalar</ref></type>
        <definition>scalar approx_dX22_max</definition>
        <argsstring>(std::vector&lt; double &gt; params)</argsstring>
        <name>approx_dX22_max</name>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/approx_functions.cpp" line="16" column="8" bodyfile="src/approx_functions.cpp" bodystart="16" bodyend="19"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;approx_functions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Xsection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"><ref refid="structscalar" kindref="compound">scalar</ref><sp/>approx_X22(std::vector&lt;double&gt;<sp/>params){</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sqrts<sp/>=<sp/>params[0];</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>params[1];</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structscalar" kindref="compound">scalar</ref>{1.0/T/T};</highlight></codeline>
<codeline lineno="8"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><ref refid="structscalar" kindref="compound">scalar</ref><sp/>approx_X22QQbar(std::vector&lt;double&gt;<sp/>params){</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lnsqrts<sp/>=<sp/>params[0];</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>std::exp(2*lnsqrts);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structscalar" kindref="compound">scalar</ref>{std::log(1+s/6.76)/s};</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><ref refid="structscalar" kindref="compound">scalar</ref><sp/>approx_dX22_max(std::vector&lt;double&gt;<sp/>params){</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>params[1];</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structscalar" kindref="compound">scalar</ref>{1.0/std::pow(T,<sp/>2)};</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/approx_functions.cpp"/>
  </compounddef>
</doxygen>
