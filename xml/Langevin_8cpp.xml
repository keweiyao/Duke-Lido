<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="Langevin_8cpp" kind="file" language="C++">
    <compoundname>Langevin.cpp</compoundname>
    <includes refid="Langevin_8h" local="yes">Langevin.h</includes>
    <includes refid="random_8h" local="yes">random.h</includes>
    <includes refid="predefine_8h" local="yes">predefine.h</includes>
    <incdepgraph>
      <node id="13">
        <label>iomanip</label>
      </node>
      <node id="10">
        <label>predefine.h</label>
        <link refid="predefine_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cmath</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="4">
        <label>lorentz.h</label>
        <link refid="lorentz_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>fstream</label>
      </node>
      <node id="8">
        <label>random.h</label>
        <link refid="random_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>random</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
      <node id="14">
        <label>sstream</label>
      </node>
      <node id="6">
        <label>cstdlib</label>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
      <node id="11">
        <label>H5Cpp.h</label>
      </node>
      <node id="2">
        <label>Langevin.h</label>
        <link refid="Langevin_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Langevin.cpp</label>
        <link refid="Langevin_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="Langevin_8cpp_1a4f41fc56ffc7d06df51b6fbccd8c0846" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double tiny</definition>
        <argsstring></argsstring>
        <name>tiny</name>
        <initializer>= 1e-10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Langevin.cpp" line="4" column="14" bodyfile="src/Langevin.cpp" bodystart="4" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="Langevin_8cpp_1a8cae755e697fd57bf00227b0f962340f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double deltaQhat</definition>
        <argsstring>(double T, double M, double E)</argsstring>
        <name>deltaQhat</name>
        <param>
          <type>double</type>
          <declname>T</declname>
        </param>
        <param>
          <type>double</type>
          <declname>M</declname>
        </param>
        <param>
          <type>double</type>
          <declname>E</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Langevin.cpp" line="5" column="15" bodyfile="src/Langevin.cpp" bodystart="5" bodyend="7"/>
      </memberdef>
      <memberdef kind="function" id="Langevin_8cpp_1a281892c97d43da034f27f15951e049b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double qhat_small_angle_LOpQCD</definition>
        <argsstring>(int pid, double E, double M, double T)</argsstring>
        <name>qhat_small_angle_LOpQCD</name>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>double</type>
          <declname>E</declname>
        </param>
        <param>
          <type>double</type>
          <declname>M</declname>
        </param>
        <param>
          <type>double</type>
          <declname>T</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Langevin.cpp" line="9" column="8" bodyfile="src/Langevin.cpp" bodystart="9" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="Langevin_8cpp_1a1fece6acfb44b662bf63503ced542c47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double qhat_L_small_angle_LOpQCD</definition>
        <argsstring>(int pid, double E, double M, double T)</argsstring>
        <name>qhat_L_small_angle_LOpQCD</name>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>double</type>
          <declname>E</declname>
        </param>
        <param>
          <type>double</type>
          <declname>M</declname>
        </param>
        <param>
          <type>double</type>
          <declname>T</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Langevin.cpp" line="17" column="8" bodyfile="src/Langevin.cpp" bodystart="17" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="Langevin_8cpp_1ae3d68ff6d026425a8bc0b8efdc83f6f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double qhat</definition>
        <argsstring>(int pid, double E, double M, double T)</argsstring>
        <name>qhat</name>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>double</type>
          <declname>E</declname>
        </param>
        <param>
          <type>double</type>
          <declname>M</declname>
        </param>
        <param>
          <type>double</type>
          <declname>T</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Langevin.cpp" line="26" column="8" bodyfile="src/Langevin.cpp" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="Langevin_8cpp_1a0b7ca63860cb4f8d190cd0fbdd336c8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double qhat_L</definition>
        <argsstring>(int pid, double E, double M, double T)</argsstring>
        <name>qhat_L</name>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>double</type>
          <declname>E</declname>
        </param>
        <param>
          <type>double</type>
          <declname>M</declname>
        </param>
        <param>
          <type>double</type>
          <declname>T</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Langevin.cpp" line="31" column="8" bodyfile="src/Langevin.cpp" bodystart="31" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="Langevin_8cpp_1a210206e12e211ac60389b60596e00319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dqhat_L_dp2</definition>
        <argsstring>(int pid, double E, double M, double T)</argsstring>
        <name>dqhat_L_dp2</name>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>double</type>
          <declname>E</declname>
        </param>
        <param>
          <type>double</type>
          <declname>M</declname>
        </param>
        <param>
          <type>double</type>
          <declname>T</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Langevin.cpp" line="35" column="8" bodyfile="src/Langevin.cpp" bodystart="35" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="Langevin_8cpp_1a2c7ec644a7df1a0007e4d70f1f01edc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ito_update_lab</definition>
        <argsstring>(int pid, double dt_lab, double M, double T, std::vector&lt; double &gt; v, const fourvec &amp;pIn, fourvec &amp;pOut)</argsstring>
        <name>Ito_update_lab</name>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt_lab</declname>
        </param>
        <param>
          <type>double</type>
          <declname>M</declname>
        </param>
        <param>
          <type>double</type>
          <declname>T</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="structfourvec" kindref="compound">fourvec</ref> &amp;</type>
          <declname>pIn</declname>
        </param>
        <param>
          <type><ref refid="structfourvec" kindref="compound">fourvec</ref> &amp;</type>
          <declname>pOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Langevin.cpp" line="42" column="6" bodyfile="src/Langevin.cpp" bodystart="42" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="Langevin_8cpp_1af213ad677b22742728be0b59120daf27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Ito_update_rest</definition>
        <argsstring>(int pid, double dt, double M, double T, const fourvec &amp;pIn, fourvec &amp;pOut)</argsstring>
        <name>Ito_update_rest</name>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>double</type>
          <declname>M</declname>
        </param>
        <param>
          <type>double</type>
          <declname>T</declname>
        </param>
        <param>
          <type>const <ref refid="structfourvec" kindref="compound">fourvec</ref> &amp;</type>
          <declname>pIn</declname>
        </param>
        <param>
          <type><ref refid="structfourvec" kindref="compound">fourvec</ref> &amp;</type>
          <declname>pOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Langevin.cpp" line="71" column="6" bodyfile="src/Langevin.cpp" bodystart="71" bodyend="89"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Langevin.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;random.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;predefine.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tiny<sp/>=<sp/>1e-10;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>deltaQhat(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E){</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0*5.*std::pow(T,3)*(7*M/(6*M+E));</highlight></codeline>
<codeline lineno="7"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>qhat_small_angle_LOpQCD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T){</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>CR<sp/>=<sp/>(pid==21)<sp/>?<sp/>CA<sp/>:<sp/>CF;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mD2<sp/>=<sp/>t_channel_mD2-&gt;get_mD2(T);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Q2cut<sp/>=<sp/>std::max(std::min(cut*mD2,<sp/>6*E*T),mD2);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alpha_s(Q2cut,<sp/>T)<sp/>*<sp/>CR<sp/>*<sp/>T<sp/>*<sp/>mD2<sp/>*<sp/>std::log(1+Q2cut/mD2)<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>+<sp/>deltaQhat(T,<sp/>M,<sp/>E);</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>qhat_L_small_angle_LOpQCD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T){</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>CR<sp/>=<sp/>(pid==21)<sp/>?<sp/>CA<sp/>:<sp/>CF;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mD2<sp/>=<sp/>t_channel_mD2-&gt;get_mD2(T);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Q2cut<sp/>=<sp/>std::max(std::min(cut*mD2,<sp/>6*E*T),mD2);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alpha_s(Q2cut,<sp/>T)<sp/>*<sp/>CR<sp/>*<sp/>T<sp/>*<sp/>.5*mD2<sp/>*<sp/>std::log(1+Q2cut/mD2)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>deltaQhat(T,<sp/>M,<sp/>E)/2.;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>qhat(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T){</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>qhat_small_angle_LOpQCD(pid,<sp/>E,<sp/>M,<sp/>T);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>qhat_L(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T){</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>qhat_L_small_angle_LOpQCD(pid,<sp/>E,<sp/>M,<sp/>T);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dqhat_L_dp2(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p2<sp/>=<sp/>E*E<sp/>-<sp/>M*M<sp/>+<sp/>tiny;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dp2<sp/>=<sp/>p2*.05;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Eprime<sp/>=<sp/>std::sqrt(E*E<sp/>+<sp/>dp2);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(qhat_L(pid,<sp/>Eprime,<sp/>M,<sp/>T)<sp/>-<sp/>qhat_L(pid,<sp/>E,<sp/>M,<sp/>T)<sp/>)<sp/>/dp2;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Ito_update_lab(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt_lab,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T,<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfourvec" kindref="compound">fourvec</ref><sp/>&amp;<sp/>pIn,<sp/><ref refid="structfourvec" kindref="compound">fourvec</ref><sp/>&amp;<sp/>pOut){</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Boost<sp/>pIn<sp/>to<sp/>medium<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pIn_cell<sp/>=<sp/>pIn.boost_to(v[0],<sp/>v[1],<sp/>v[2]);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Boost<sp/>dt<sp/>to<sp/>medium<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt<sp/>=<sp/>dt_lab*pIn_cell.t()/pIn.t();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>imaging<sp/>rotating<sp/>to<sp/>a<sp/>frame<sp/>where<sp/>pIn<sp/>lies<sp/>on<sp/>z-axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E0<sp/>=<sp/>pIn_cell.t();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p0<sp/>=<sp/>std::sqrt(E0*E0<sp/>-<sp/>M*M<sp/>+<sp/>1e-6);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>kt<sp/>=<sp/>qhat(pid,<sp/>E0,<sp/>M,<sp/>T)/2.;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>kl<sp/>=<sp/>qhat_L(pid,<sp/>E0,<sp/>M,<sp/>T);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ed<sp/>=<sp/>std::max(E0,<sp/>3.*T);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>drag<sp/>=<sp/>kl/(2.*Ed*T);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>damp<sp/>=<sp/>std::max(1.-drag*dt,<sp/>0.);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ct<sp/>=<sp/>std::sqrt(kt*dt);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Cl<sp/>=<sp/>std::sqrt(kl*dt);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>pOut.a[1]<sp/>=<sp/>Ct<sp/>*<sp/>Srandom::white_noise(Srandom::gen);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>pOut.a[2]<sp/>=<sp/>Ct<sp/>*<sp/>Srandom::white_noise(Srandom::gen);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>pOut.a[3]<sp/>=<sp/>p0<sp/>*<sp/>damp<sp/>+<sp/>Cl<sp/>*<sp/>Srandom::white_noise(Srandom::gen);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>pOut.a[0]<sp/>=<sp/>std::sqrt(M*M<sp/>+<sp/>pOut.pabs2()<sp/>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rotate<sp/>back<sp/>to<sp/>the<sp/>original<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>pOut<sp/>=<sp/>pOut.rotate_back(pIn_cell);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>boost<sp/>back<sp/>to<sp/>lab<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>pOut<sp/>=<sp/>pOut.boost_back(v[0],<sp/>v[1],<sp/>v[2]);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Ito_update_rest(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T,<sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfourvec" kindref="compound">fourvec</ref><sp/>&amp;<sp/>pIn,<sp/><ref refid="structfourvec" kindref="compound">fourvec</ref><sp/>&amp;<sp/>pOut){</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>imaging<sp/>rotating<sp/>to<sp/>a<sp/>frame<sp/>where<sp/>pIn<sp/>lies<sp/>on<sp/>z-axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E0<sp/>=<sp/>pIn.t();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p0<sp/>=<sp/>std::sqrt(E0*E0<sp/>-<sp/>M*M<sp/>+<sp/>1e-9);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Eregulate<sp/>=<sp/>std::max(E0,<sp/>3*T);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>kt<sp/>=<sp/>qhat(pid,<sp/>Eregulate,<sp/>M,<sp/>T)/2.;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>kl<sp/>=<sp/>qhat_L(pid,<sp/>Eregulate,<sp/>M,<sp/>T);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>drag<sp/>=<sp/>kl/(2.*Eregulate*T);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>damp<sp/>=<sp/>std::max(1.-drag*dt,<sp/>0.);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ct<sp/>=<sp/>std::sqrt(kt*dt);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Cl<sp/>=<sp/>std::sqrt(kl*dt);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>pOut.a[1]<sp/>=<sp/>Ct<sp/>*<sp/>Srandom::white_noise(Srandom::gen);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>pOut.a[2]<sp/>=<sp/>Ct<sp/>*<sp/>Srandom::white_noise(Srandom::gen);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>pOut.a[3]<sp/>=<sp/>p0<sp/>*<sp/>damp<sp/>+<sp/>Cl<sp/>*<sp/>Srandom::white_noise(Srandom::gen);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>pOut.a[0]<sp/>=<sp/>std::sqrt(M*M<sp/>+<sp/>pOut.pabs2()<sp/>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rotate<sp/>back<sp/>to<sp/>the<sp/>original<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>pOut<sp/>=<sp/>pOut.rotate_back(pIn);</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/Langevin.cpp"/>
  </compounddef>
</doxygen>
