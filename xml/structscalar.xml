<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structscalar" kind="struct" language="C++" prot="public">
    <compoundname>scalar</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structscalar_1a4cb6835fdf3c41f397aed127257d56ed" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double scalar::s</definition>
        <argsstring></argsstring>
        <name>s</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="30" column="8" bodyfile="src/lorentz.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structscalar_1a544bd2a2d83dfda0efc043c7dbf118d5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structscalar" kindref="compound">scalar</ref></type>
        <definition>static scalar scalar::unity</definition>
        <argsstring>(void)</argsstring>
        <name>unity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="27" column="15" bodyfile="src/lorentz.h" bodystart="27" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="structscalar_1a3e0855f43f6ef929035d5bac48343a53" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t scalar::size</definition>
        <argsstring>(void)</argsstring>
        <name>size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="51" column="15" bodyfile="src/lorentz.h" bodystart="51" bodyend="51"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structscalar_1a76667b06968bb1c08e97d8932bd2e771" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const scalar &amp;A)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structscalar" kindref="compound">scalar</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="31" column="8" bodyfile="src/lorentz.h" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="friend" id="structscalar_1a7bbbc7f1edf7cf7018f8a916da6726b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structscalar" kindref="compound">scalar</ref></type>
        <definition>scalar operator+</definition>
        <argsstring>(const scalar &amp;A, const scalar &amp;B)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structscalar" kindref="compound">scalar</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structscalar" kindref="compound">scalar</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="35" column="17" bodyfile="src/lorentz.h" bodystart="35" bodyend="37"/>
      </memberdef>
      <memberdef kind="friend" id="structscalar_1a6d2dab1ecb6a7fc19ff3a8857c5b3e13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structscalar" kindref="compound">scalar</ref></type>
        <definition>scalar operator-</definition>
        <argsstring>(const scalar &amp;A, const scalar &amp;B)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structscalar" kindref="compound">scalar</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structscalar" kindref="compound">scalar</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="38" column="17" bodyfile="src/lorentz.h" bodystart="38" bodyend="40"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structscalar_1a10b4873427dcd49d53f1401704e2bcb6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structscalar" kindref="compound">scalar</ref></type>
        <definition>scalar scalar::operator*</definition>
        <argsstring>(T u)</argsstring>
        <name>operator*</name>
        <param>
          <type>T</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="42" column="10" bodyfile="src/lorentz.h" bodystart="42" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="structscalar_1afb4a6edb4351e9d5c4b0b493080867a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structscalar" kindref="compound">scalar</ref></type>
        <definition>scalar scalar::operator/</definition>
        <argsstring>(scalar B)</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="structscalar" kindref="compound">scalar</ref></type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="45" column="10" bodyfile="src/lorentz.h" bodystart="45" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="structscalar_1aabe36524359c18d35139ab7a8cbd7721" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structscalar" kindref="compound">scalar</ref></type>
        <definition>scalar scalar::operator*</definition>
        <argsstring>(scalar B)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structscalar" kindref="compound">scalar</ref></type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="48" column="10" bodyfile="src/lorentz.h" bodystart="48" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="structscalar_1a00313ef5649dddfd44b6bde70eba6290" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void scalar::set</definition>
        <argsstring>(int i, double value)</argsstring>
        <name>set</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="52" column="6" bodyfile="src/lorentz.h" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="structscalar_1ac05c3478175e2eee6bf5c8ff5e482701" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double scalar::get</definition>
        <argsstring>(int i)</argsstring>
        <name>get</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="53" column="8" bodyfile="src/lorentz.h" bodystart="53" bodyend="53"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/lorentz.h" line="26" column="13" bodyfile="src/lorentz.h" bodystart="26" bodyend="54"/>
    <listofallmembers>
      <member refid="structscalar_1ac05c3478175e2eee6bf5c8ff5e482701" prot="public" virt="non-virtual"><scope>scalar</scope><name>get</name></member>
      <member refid="structscalar_1a10b4873427dcd49d53f1401704e2bcb6" prot="public" virt="non-virtual"><scope>scalar</scope><name>operator*</name></member>
      <member refid="structscalar_1aabe36524359c18d35139ab7a8cbd7721" prot="public" virt="non-virtual"><scope>scalar</scope><name>operator*</name></member>
      <member refid="structscalar_1a7bbbc7f1edf7cf7018f8a916da6726b7" prot="public" virt="non-virtual"><scope>scalar</scope><name>operator+</name></member>
      <member refid="structscalar_1a6d2dab1ecb6a7fc19ff3a8857c5b3e13" prot="public" virt="non-virtual"><scope>scalar</scope><name>operator-</name></member>
      <member refid="structscalar_1afb4a6edb4351e9d5c4b0b493080867a0" prot="public" virt="non-virtual"><scope>scalar</scope><name>operator/</name></member>
      <member refid="structscalar_1a76667b06968bb1c08e97d8932bd2e771" prot="public" virt="non-virtual"><scope>scalar</scope><name>operator&lt;&lt;</name></member>
      <member refid="structscalar_1a4cb6835fdf3c41f397aed127257d56ed" prot="public" virt="non-virtual"><scope>scalar</scope><name>s</name></member>
      <member refid="structscalar_1a00313ef5649dddfd44b6bde70eba6290" prot="public" virt="non-virtual"><scope>scalar</scope><name>set</name></member>
      <member refid="structscalar_1a3e0855f43f6ef929035d5bac48343a53" prot="public" virt="non-virtual"><scope>scalar</scope><name>size</name></member>
      <member refid="structscalar_1a544bd2a2d83dfda0efc043c7dbf118d5" prot="public" virt="non-virtual"><scope>scalar</scope><name>unity</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
