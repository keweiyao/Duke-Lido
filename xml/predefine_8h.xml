<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="predefine_8h" kind="file" language="C++">
    <compoundname>predefine.h</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">H5Cpp.h</includes>
    <includes local="no">string</includes>
    <includes local="no">iostream</includes>
    <includes local="no">vector</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">sstream</includes>
    <includes local="no">fstream</includes>
    <includes refid="lorentz_8h" local="yes">lorentz.h</includes>
    <includedby refid="Rate_8h" local="yes">src/Rate.h</includedby>
    <includedby refid="Hadronize_8h" local="yes">src/Hadronize.h</includedby>
    <includedby refid="Langevin_8cpp" local="yes">src/Langevin.cpp</includedby>
    <includedby refid="lido_8h" local="yes">src/lido.h</includedby>
    <includedby refid="matrix__elements__1-2_8cpp" local="yes">src/matrix_elements_1-2.cpp</includedby>
    <includedby refid="matrix__elements__2-2_8cpp" local="yes">src/matrix_elements_2-2.cpp</includedby>
    <includedby refid="matrix__elements__2-3_8cpp" local="yes">src/matrix_elements_2-3.cpp</includedby>
    <includedby refid="Medium__Reader_8h" local="yes">src/Medium_Reader.h</includedby>
    <includedby refid="sampler_8h" local="yes">src/sampler.h</includedby>
    <includedby refid="predefine_8cpp" local="yes">src/predefine.cpp</includedby>
    <includedby refid="TableBase_8cpp" local="yes">src/TableBase.cpp</includedby>
    <includedby refid="Xsection_8cpp" local="yes">src/Xsection.cpp</includedby>
    <incdepgraph>
      <node id="7">
        <label>iomanip</label>
      </node>
      <node id="1">
        <label>src/predefine.h</label>
        <link refid="predefine_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cmath</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="10">
        <label>lorentz.h</label>
        <link refid="lorentz_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>fstream</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="8">
        <label>sstream</label>
      </node>
      <node id="11">
        <label>cstdlib</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="3">
        <label>H5Cpp.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8">
        <label>src/minimizer.h</label>
        <link refid="minimizer_8h_source"/>
      </node>
      <node id="1">
        <label>src/predefine.h</label>
        <link refid="predefine_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/Rate.h</label>
        <link refid="Rate_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>src/sampler.h</label>
        <link refid="sampler_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/lido.h</label>
        <link refid="lido_8h_source"/>
      </node>
      <node id="5">
        <label>src/Hadronize.h</label>
        <link refid="Hadronize_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/collision_manager.h</label>
        <link refid="collision__manager_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>src/Medium_Reader.h</label>
        <link refid="Medium__Reader_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classDebye__mass" prot="public">Debye_mass</innerclass>
    <innerclass refid="classff" prot="public">ff</innerclass>
    <innerclass refid="structparticle" prot="public">particle</innerclass>
    <innerclass refid="structcurrent" prot="public">current</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="predefine_8h_1a304f1dcba9400d774bf0f790d5e3f138" prot="public" static="no" mutable="no">
        <type>char</type>
        <definition>char HS2PP[]</definition>
        <argsstring>[]</argsstring>
        <name>HS2PP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="14" column="13" bodyfile="src/predefine.cpp" bodystart="7" bodyend="-1" declfile="src/predefine.h" declline="14" declcolumn="13"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1a1cb068537e886b9258580d8ed5fb5373" prot="public" static="no" mutable="no">
        <type>char</type>
        <definition>char HS2PPP[]</definition>
        <argsstring>[]</argsstring>
        <name>HS2PPP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="15" column="13" bodyfile="src/predefine.cpp" bodystart="8" bodyend="-1" declfile="src/predefine.h" declline="15" declcolumn="13"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1a1c75f22bfb9c494b0fa57af136aa5cca" prot="public" static="no" mutable="no">
        <type>char</type>
        <definition>char HSS2PP[]</definition>
        <argsstring>[]</argsstring>
        <name>HSS2PP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="16" column="13" bodyfile="src/predefine.cpp" bodystart="9" bodyend="-1" declfile="src/predefine.h" declline="16" declcolumn="13"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1aa407dfd58fbf35d8db5986c225e43b59" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool type1_warned</definition>
        <argsstring></argsstring>
        <name>type1_warned</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="18" column="13" bodyfile="src/predefine.cpp" bodystart="11" bodyend="-1" declfile="src/predefine.h" declline="18" declcolumn="13"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1a5266d80be471692fcb524ec24b91bd83" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool type2_warned</definition>
        <argsstring></argsstring>
        <name>type2_warned</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="19" column="13" bodyfile="src/predefine.cpp" bodystart="12" bodyend="-1" declfile="src/predefine.h" declline="19" declcolumn="13"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1ac9b5264b5467017de7679becdf61df98" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool type3_warned</definition>
        <argsstring></argsstring>
        <name>type3_warned</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="20" column="13" bodyfile="src/predefine.cpp" bodystart="13" bodyend="-1" declfile="src/predefine.h" declline="20" declcolumn="13"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1a6bec4f2790de7d539eb09dd3544eb4f4" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double c2pi</definition>
        <argsstring></argsstring>
        <name>c2pi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="23" column="21" bodyfile="src/predefine.cpp" bodystart="15" bodyend="-1" declfile="src/predefine.h" declline="23" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1a035608b8c87df54e0f4e3fe16981d4b0" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double c4d9</definition>
        <argsstring></argsstring>
        <name>c4d9</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="24" column="21" bodyfile="src/predefine.cpp" bodystart="16" bodyend="-1" declfile="src/predefine.h" declline="24" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1ae137361dce7c85a8df2cdddaa21d6f08" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double c1d9</definition>
        <argsstring></argsstring>
        <name>c1d9</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="25" column="21" bodyfile="src/predefine.cpp" bodystart="17" bodyend="-1" declfile="src/predefine.h" declline="25" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1ae44fde3ed734d626b58234b6812f841e" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double c8pi</definition>
        <argsstring></argsstring>
        <name>c8pi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="26" column="21" bodyfile="src/predefine.cpp" bodystart="18" bodyend="-1" declfile="src/predefine.h" declline="26" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1a353af8fe7e4cc22d62a1f831b3d3cbca" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double c16pi</definition>
        <argsstring></argsstring>
        <name>c16pi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="27" column="21" bodyfile="src/predefine.cpp" bodystart="19" bodyend="-1" declfile="src/predefine.h" declline="27" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1ad26bb9894bc338e7e7f0120896e2cc26" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double c48pi</definition>
        <argsstring></argsstring>
        <name>c48pi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="28" column="21" bodyfile="src/predefine.cpp" bodystart="20" bodyend="-1" declfile="src/predefine.h" declline="28" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1aa14911688dfb4b614afd050f1d81b84c" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double c16pi2</definition>
        <argsstring></argsstring>
        <name>c16pi2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="29" column="21" bodyfile="src/predefine.cpp" bodystart="21" bodyend="-1" declfile="src/predefine.h" declline="29" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1ac2cf5fd03843384e1ad3abb9cd5edbe7" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double c72pi2</definition>
        <argsstring></argsstring>
        <name>c72pi2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="30" column="21" bodyfile="src/predefine.cpp" bodystart="22" bodyend="-1" declfile="src/predefine.h" declline="30" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1a2f17c7473f4fa200d97957f8eb706e80" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double c32pi3</definition>
        <argsstring></argsstring>
        <name>c32pi3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="31" column="21" bodyfile="src/predefine.cpp" bodystart="23" bodyend="-1" declfile="src/predefine.h" declline="31" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1aa0889504017b89a67010a9b49249761b" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double c64d9pi2</definition>
        <argsstring></argsstring>
        <name>c64d9pi2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="32" column="21" bodyfile="src/predefine.cpp" bodystart="24" bodyend="-1" declfile="src/predefine.h" declline="32" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1af562084997bc513070ddf811b2079ad3" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double c256pi4</definition>
        <argsstring></argsstring>
        <name>c256pi4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="33" column="21" bodyfile="src/predefine.cpp" bodystart="25" bodyend="-1" declfile="src/predefine.h" declline="33" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1a747d307a0fb946dd06d26182ae280333" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double fmc_to_GeV_m1</definition>
        <argsstring></argsstring>
        <name>fmc_to_GeV_m1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="34" column="21" bodyfile="src/predefine.cpp" bodystart="26" bodyend="-1" declfile="src/predefine.h" declline="34" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1a22d0daadaf4a81b8dae28ae6b533e13c" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int Nc</definition>
        <argsstring></argsstring>
        <name>Nc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="36" column="18" bodyfile="src/predefine.cpp" bodystart="29" bodyend="-1" declfile="src/predefine.h" declline="36" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1af501b9b181d27b38e44fb8f166266e9d" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int nf</definition>
        <argsstring></argsstring>
        <name>nf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="36" column="21" bodyfile="src/predefine.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1a41bca0fdef97004c93e39c768aa71206" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double CF</definition>
        <argsstring></argsstring>
        <name>CF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="37" column="21" bodyfile="src/predefine.cpp" bodystart="30" bodyend="-1" declfile="src/predefine.h" declline="37" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1aefd3a506c7fe38bf0d44973941498ac8" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double CA</definition>
        <argsstring></argsstring>
        <name>CA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="38" column="21" bodyfile="src/predefine.cpp" bodystart="31" bodyend="-1" declfile="src/predefine.h" declline="38" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1a528e3ba6ab4416d503d263eb86e5c5a9" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double CF_over_CA</definition>
        <argsstring></argsstring>
        <name>CF_over_CA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="39" column="21" bodyfile="src/predefine.cpp" bodystart="32" bodyend="-1" declfile="src/predefine.h" declline="39" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1a837d611f72e495b5ae8b93a978b6a378" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double TR</definition>
        <argsstring></argsstring>
        <name>TR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="40" column="21" bodyfile="src/predefine.cpp" bodystart="33" bodyend="-1" declfile="src/predefine.h" declline="40" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1ad99d2a0b5a335e334b306c2a38a80c52" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int color_count</definition>
        <argsstring></argsstring>
        <name>color_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="41" column="12" bodyfile="src/predefine.cpp" bodystart="27" bodyend="-1" declfile="src/predefine.h" declline="41" declcolumn="12"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1a06f095b54145e3175d5f7e0f46d1cb2d" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double pf_g</definition>
        <argsstring></argsstring>
        <name>pf_g</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="47" column="21" bodyfile="src/predefine.cpp" bodystart="41" bodyend="-1" declfile="src/predefine.h" declline="47" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1a99ae2276e840bf2517c91e97b6e0de6c" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double alpha0</definition>
        <argsstring></argsstring>
        <name>alpha0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="51" column="21" bodyfile="src/predefine.cpp" bodystart="45" bodyend="-1" declfile="src/predefine.h" declline="51" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1a0874ea73264f5b0989ab8b77b7252344" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double alpha_max</definition>
        <argsstring></argsstring>
        <name>alpha_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="52" column="21" bodyfile="src/predefine.cpp" bodystart="46" bodyend="-1" declfile="src/predefine.h" declline="52" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1ae711f5d52549c57a7378be819bb7e779" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Lambda</definition>
        <argsstring></argsstring>
        <name>Lambda</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="53" column="21" bodyfile="src/predefine.cpp" bodystart="47" bodyend="-1" declfile="src/predefine.h" declline="53" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1a33a95e5568b62fe39e6b13453c4a3e5e" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Lambda2</definition>
        <argsstring></argsstring>
        <name>Lambda2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="54" column="21" bodyfile="src/predefine.cpp" bodystart="48" bodyend="-1" declfile="src/predefine.h" declline="54" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1a4dcfdacad0380a6fbdfcf1ac88e7e1a5" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double mu2_NP</definition>
        <argsstring></argsstring>
        <name>mu2_NP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="55" column="21" bodyfile="src/predefine.cpp" bodystart="49" bodyend="-1" declfile="src/predefine.h" declline="55" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1a80d402d10e8341004c0caf10133b80ab" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double scale</definition>
        <argsstring></argsstring>
        <name>scale</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="56" column="15" bodyfile="src/predefine.cpp" bodystart="52" bodyend="-1" declfile="src/predefine.h" declline="56" declcolumn="15"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1a26c600a9afef06b790be07d4ef26b998" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double afix</definition>
        <argsstring></argsstring>
        <name>afix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="57" column="15" bodyfile="src/predefine.cpp" bodystart="53" bodyend="-1" declfile="src/predefine.h" declline="57" declcolumn="15"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1aa494ef8d006a704e644829885785458d" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double cut</definition>
        <argsstring></argsstring>
        <name>cut</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="58" column="15" bodyfile="src/predefine.cpp" bodystart="51" bodyend="-1" declfile="src/predefine.h" declline="58" declcolumn="15"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1aefd8df84bd08e0ad26e3b9b61bc89eb0" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double Lido_Ecut</definition>
        <argsstring></argsstring>
        <name>Lido_Ecut</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="59" column="15" bodyfile="src/predefine.cpp" bodystart="54" bodyend="-1" declfile="src/predefine.h" declline="59" declcolumn="15"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1ab1851c42e4a750b9ae5a551c84f505a4" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double LPM_prefactor</definition>
        <argsstring></argsstring>
        <name>LPM_prefactor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="60" column="21" bodyfile="src/predefine.cpp" bodystart="57" bodyend="-1" declfile="src/predefine.h" declline="60" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1afbaea8eaebde60864311dd5582d4ad80" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Mc</definition>
        <argsstring></argsstring>
        <name>Mc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="61" column="21" bodyfile="src/predefine.cpp" bodystart="34" bodyend="-1" declfile="src/predefine.h" declline="61" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1a1fedee55570a0d90fed7ab820afd21e3" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Mb</definition>
        <argsstring></argsstring>
        <name>Mb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="62" column="21" bodyfile="src/predefine.cpp" bodystart="35" bodyend="-1" declfile="src/predefine.h" declline="62" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="predefine_8h_1afaf0bfd9c032a00337e2276e404314d5" prot="public" static="no" mutable="no">
        <type><ref refid="classDebye__mass" kindref="compound">Debye_mass</ref> *</type>
        <definition>Debye_mass* t_channel_mD2</definition>
        <argsstring></argsstring>
        <name>t_channel_mD2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="81" column="20" bodyfile="src/predefine.cpp" bodystart="56" bodyend="-1" declfile="src/predefine.h" declline="81" declcolumn="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="predefine_8h_1af96a197ecd645991042ccc5d4908be2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initialize_mD_and_scale</definition>
        <argsstring>(int _mD_type, double _mu, double _afix, double _theta, double _cut)</argsstring>
        <name>initialize_mD_and_scale</name>
        <param>
          <type>int</type>
          <declname>_mD_type</declname>
        </param>
        <param>
          <type>double</type>
          <declname>_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>_afix</declname>
        </param>
        <param>
          <type>double</type>
          <declname>_theta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>_cut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="64" column="6" bodyfile="src/predefine.cpp" bodystart="62" bodyend="68" declfile="src/predefine.h" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a4cc8c754657f5d03a79b1d05c8d8019f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double alpha_s</definition>
        <argsstring>(double Q2, double T)</argsstring>
        <name>alpha_s</name>
        <param>
          <type>double</type>
          <declname>Q2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>T</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="65" column="8" bodyfile="src/predefine.cpp" bodystart="177" bodyend="189" declfile="src/predefine.h" declline="65" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a3e6385ae9f437476c2107640b25d7d4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void echo</definition>
        <argsstring>(void)</argsstring>
        <name>echo</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="66" column="6" bodyfile="src/predefine.cpp" bodystart="81" bodyend="84" declfile="src/predefine.h" declline="66" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1af2defe967be37c9d4b70fae6e1ce6f04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double P_q2qg</definition>
        <argsstring>(double x)</argsstring>
        <name>P_q2qg</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="84" column="8" bodyfile="src/predefine.cpp" bodystart="131" bodyend="133" declfile="src/predefine.h" declline="84" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a9f6d8c5e2ec4079333a92f9984521f64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double P_q2gq</definition>
        <argsstring>(double x)</argsstring>
        <name>P_q2gq</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="85" column="8" bodyfile="src/predefine.cpp" bodystart="134" bodyend="136" declfile="src/predefine.h" declline="85" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a722402bff3eee1fa7cdce563cdd8eed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double P_g2gg</definition>
        <argsstring>(double x)</argsstring>
        <name>P_g2gg</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="86" column="8" bodyfile="src/predefine.cpp" bodystart="137" bodyend="139" declfile="src/predefine.h" declline="86" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1ac3e19a8697d7434d8f9c505fc3073a82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double P_g2qqbar</definition>
        <argsstring>(double x)</argsstring>
        <name>P_g2qqbar</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="87" column="8" bodyfile="src/predefine.cpp" bodystart="140" bodyend="142" declfile="src/predefine.h" declline="87" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1aaecf660a76882ed9c189e1376bac5895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pid2mass</definition>
        <argsstring>(int pid)</argsstring>
        <name>pid2mass</name>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="89" column="8" bodyfile="src/predefine.cpp" bodystart="70" bodyend="78" declfile="src/predefine.h" declline="89" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1ad36709657da2605155d7435809fb786e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfourvec" kindref="compound">fourvec</ref></type>
        <definition>fourvec put_on_shell</definition>
        <argsstring>(fourvec p, int pid)</argsstring>
        <name>put_on_shell</name>
        <param>
          <type><ref refid="structfourvec" kindref="compound">fourvec</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="90" column="9" bodyfile="src/predefine.cpp" bodystart="197" bodyend="201" declfile="src/predefine.h" declline="90" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a340bd12d3fe162c8abeb36f32d0f3c21" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const H5::PredType &amp;</type>
        <definition>const H5::PredType&amp; type</definition>
        <argsstring>()</argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="93" column="39" declfile="src/predefine.h" declline="93" declcolumn="39"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1ab31c29284c669cc7fb73444a22c3a01c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>const H5::PredType &amp;</type>
        <definition>const H5::PredType&amp; type&lt; size_t &gt;</definition>
        <argsstring>()</argsstring>
        <name>type&lt; size_t &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="94" column="25" bodyfile="src/predefine.h" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a4fb7f43e0d81a2bbc8dc8c1e7c79f484" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>const H5::PredType &amp;</type>
        <definition>const H5::PredType&amp; type&lt; double &gt;</definition>
        <argsstring>()</argsstring>
        <name>type&lt; double &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="95" column="25" bodyfile="src/predefine.h" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a222e07166f363b53a4aa2961f22f6456" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>const H5::PredType &amp;</type>
        <definition>const H5::PredType&amp; type&lt; int &gt;</definition>
        <argsstring>()</argsstring>
        <name>type&lt; int &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="96" column="25" bodyfile="src/predefine.h" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a9a70308b06c7b3adfbf579f6714a6669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void hdf5_add_scalar_attr</definition>
        <argsstring>(const H5::Group &amp;gp, const std::string &amp;name, const T &amp;value)</argsstring>
        <name>hdf5_add_scalar_attr</name>
        <param>
          <type>const H5::Group &amp;</type>
          <declname>gp</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="99" column="6" bodyfile="src/predefine.h" bodystart="99" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1aa00e6eedf151686781dd9db6671a4d5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void hdf5_read_scalar_attr</definition>
        <argsstring>(const H5::Group &amp;gp, const std::string &amp;name, T &amp;value)</argsstring>
        <name>hdf5_read_scalar_attr</name>
        <param>
          <type>const H5::Group &amp;</type>
          <declname>gp</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="107" column="6" bodyfile="src/predefine.h" bodystart="107" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a905aec1b6dc442789e877bf7684f2035" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is1to2</definition>
        <argsstring>(int prcid)</argsstring>
        <name>is1to2</name>
        <param>
          <type>int</type>
          <declname>prcid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="115" column="6" bodyfile="src/predefine.cpp" bodystart="262" bodyend="265" declfile="src/predefine.h" declline="115" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1ab8f935f4dd5da1c876d8ead4a23cb85b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is2to2</definition>
        <argsstring>(int prcid)</argsstring>
        <name>is2to2</name>
        <param>
          <type>int</type>
          <declname>prcid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="116" column="6" bodyfile="src/predefine.cpp" bodystart="266" bodyend="270" declfile="src/predefine.h" declline="116" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a3e3dffd95f865315b73f8858cf569bd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is2to2_nlo</definition>
        <argsstring>(int prcid)</argsstring>
        <name>is2to2_nlo</name>
        <param>
          <type>int</type>
          <declname>prcid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="117" column="6" bodyfile="src/predefine.cpp" bodystart="271" bodyend="274" declfile="src/predefine.h" declline="117" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a5b08ee8bc67f687c82daa32054dc32c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_classical</definition>
        <argsstring>(int prcid)</argsstring>
        <name>is_classical</name>
        <param>
          <type>int</type>
          <declname>prcid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="118" column="6" bodyfile="src/predefine.cpp" bodystart="275" bodyend="280" declfile="src/predefine.h" declline="118" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1aff5c8e9300f94a0e3db9c654c6281157" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is2to3</definition>
        <argsstring>(int prcid)</argsstring>
        <name>is2to3</name>
        <param>
          <type>int</type>
          <declname>prcid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="119" column="6" bodyfile="src/predefine.cpp" bodystart="281" bodyend="287" declfile="src/predefine.h" declline="119" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1af2862d88e92fd1aa5df16d105c4829c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool isPairProduction</definition>
        <argsstring>(int prcid)</argsstring>
        <name>isPairProduction</name>
        <param>
          <type>int</type>
          <declname>prcid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="120" column="6" bodyfile="src/predefine.cpp" bodystart="288" bodyend="296" declfile="src/predefine.h" declline="120" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a7a39c0ecfa6436ce76e200080064b70b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assign_1to2_pid</definition>
        <argsstring>(int process_id, int incoming_hard_id, std::vector&lt; int &gt; &amp;pids)</argsstring>
        <name>assign_1to2_pid</name>
        <param>
          <type>int</type>
          <declname>process_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>incoming_hard_id</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>pids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="121" column="6" bodyfile="src/predefine.cpp" bodystart="553" bodyend="591" declfile="src/predefine.h" declline="121" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a56ea243101ecb34e3f3d7206cff37a11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assign_2to2_pid</definition>
        <argsstring>(int process_id, int incoming_hard_id, std::vector&lt; int &gt; &amp;pids)</argsstring>
        <name>assign_2to2_pid</name>
        <param>
          <type>int</type>
          <declname>process_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>incoming_hard_id</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>pids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="124" column="6" bodyfile="src/predefine.cpp" bodystart="593" bodyend="663" declfile="src/predefine.h" declline="124" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a762c2568459e46b790dc02c5310e4369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assign_2to3_pid</definition>
        <argsstring>(int process_id, int incoming_hard_id, std::vector&lt; int &gt; &amp;pids, bool forward)</argsstring>
        <name>assign_2to3_pid</name>
        <param>
          <type>int</type>
          <declname>process_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>incoming_hard_id</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>pids</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forward</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="127" column="6" bodyfile="src/predefine.cpp" bodystart="665" bodyend="806" declfile="src/predefine.h" declline="127" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a7f4c01ab274216a6424f728d84682aa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assign_2to2_color</definition>
        <argsstring>(int process_id, int pidA, int pid1, int pid2, int Ca, int aCa, int &amp;C1, int &amp;aC1, int &amp;C2, int &amp;aC2)</argsstring>
        <name>assign_2to2_color</name>
        <param>
          <type>int</type>
          <declname>process_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pidA</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Ca</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aCa</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>C1</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>aC1</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>C2</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>aC2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="131" column="6" bodyfile="src/predefine.cpp" bodystart="809" bodyend="907" declfile="src/predefine.h" declline="131" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1aeb98a0fb88ef87b31ae945695812aa47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assign_2to2_nlo_color</definition>
        <argsstring>(int process_id, int pidA, int pid1, int pid2, int pid3, int Ca, int aCa, int &amp;C1, int &amp;aC1, int &amp;C2, int &amp;aC2, int &amp;C3, int &amp;aC3)</argsstring>
        <name>assign_2to2_nlo_color</name>
        <param>
          <type>int</type>
          <declname>process_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pidA</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid3</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Ca</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aCa</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>C1</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>aC1</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>C2</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>aC2</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>C3</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>aC3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="137" column="6" bodyfile="src/predefine.cpp" bodystart="954" bodyend="1007" declfile="src/predefine.h" declline="137" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1ac0eae77f72ec11df3b3035b0f588ed26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assign_n2np1_color</definition>
        <argsstring>(int pidA, int pid1, int pid2, int Ca, int aCa, int &amp;C1, int &amp;aC1, int &amp;C2, int &amp;aC2)</argsstring>
        <name>assign_n2np1_color</name>
        <param>
          <type>int</type>
          <declname>pidA</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pid2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Ca</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aCa</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>C1</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>aC1</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>C2</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>aC2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="144" column="6" bodyfile="src/predefine.cpp" bodystart="910" bodyend="950" declfile="src/predefine.h" declline="144" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a0fe7f7a962476be7c7b53e0d91b136d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_file_exist</definition>
        <argsstring>(std::string fileName)</argsstring>
        <name>is_file_exist</name>
        <param>
          <type>std::string</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="188" column="6" bodyfile="src/predefine.cpp" bodystart="191" bodyend="195" declfile="src/predefine.h" declline="188" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a0aef430687ab317c067b83e826821623" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int get_process_info</definition>
        <argsstring>(std::string p, std::vector&lt; double &gt; &amp;_IM, std::vector&lt; double &gt; &amp;_FM, std::vector&lt; int &gt; &amp;_IT, std::vector&lt; int &gt; &amp;_FT)</argsstring>
        <name>get_process_info</name>
        <param>
          <type>std::string</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>_IM</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>_FM</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>_IT</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>_FT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="189" column="5" bodyfile="src/predefine.cpp" bodystart="299" bodyend="551" declfile="src/predefine.h" declline="189" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a66bb32998f850799a857a6a2072d6670" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structparticle" kindref="compound">particle</ref></type>
        <definition>particle make_parton</definition>
        <argsstring>(int pid, int col, int anticol, double scale, fourvec pmu, particle &amp;mother, double T, std::vector&lt; double &gt; vcell)</argsstring>
        <name>make_parton</name>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>int</type>
          <declname>anticol</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="structfourvec" kindref="compound">fourvec</ref></type>
          <declname>pmu</declname>
        </param>
        <param>
          <type><ref refid="structparticle" kindref="compound">particle</ref> &amp;</type>
          <declname>mother</declname>
        </param>
        <param>
          <type>double</type>
          <declname>T</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>vcell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="219" column="10" bodyfile="src/predefine.cpp" bodystart="204" bodyend="231" declfile="src/predefine.h" declline="219" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a6e0cfe01eb19eebf9019012f65550a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structparticle" kindref="compound">particle</ref></type>
        <definition>particle make_parton</definition>
        <argsstring>(int pid, int col, int acol, double scale, fourvec pmu, coordinate x)</argsstring>
        <name>make_parton</name>
        <param>
          <type>int</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>int</type>
          <declname>acol</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="structfourvec" kindref="compound">fourvec</ref></type>
          <declname>pmu</declname>
        </param>
        <param>
          <type><ref refid="structcoordinate" kindref="compound">coordinate</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="224" column="10" bodyfile="src/predefine.cpp" bodystart="233" bodyend="260" declfile="src/predefine.h" declline="224" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1aa46d8085c71934a51d8f97c11f9bf8ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void formation_time</definition>
        <argsstring>(double &amp;tauf, double &amp;Q2, int idA, int idB, int idC, fourvec pA, fourvec pB, fourvec pC, double T, fourvec p0)</argsstring>
        <name>formation_time</name>
        <param>
          <type>double &amp;</type>
          <declname>tauf</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>Q2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idA</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idB</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idC</declname>
        </param>
        <param>
          <type><ref refid="structfourvec" kindref="compound">fourvec</ref></type>
          <declname>pA</declname>
        </param>
        <param>
          <type><ref refid="structfourvec" kindref="compound">fourvec</ref></type>
          <declname>pB</declname>
        </param>
        <param>
          <type><ref refid="structfourvec" kindref="compound">fourvec</ref></type>
          <declname>pC</declname>
        </param>
        <param>
          <type>double</type>
          <declname>T</declname>
        </param>
        <param>
          <type><ref refid="structfourvec" kindref="compound">fourvec</ref></type>
          <declname>p0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="229" column="6" bodyfile="src/predefine.cpp" bodystart="147" bodyend="174" declfile="src/predefine.h" declline="229" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a1b8245037b0b80cace34acda3556cbb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double compute_realtime_to_propagate</definition>
        <argsstring>(double dt, coordinate x, fourvec p, int type)</argsstring>
        <name>compute_realtime_to_propagate</name>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <param>
          <type><ref refid="structcoordinate" kindref="compound">coordinate</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structfourvec" kindref="compound">fourvec</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="233" column="8" declfile="src/predefine.h" declline="233" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="predefine_8h_1a7df928eedf2811423be552465090aa4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void output_oscar</definition>
        <argsstring>(const std::vector&lt; particle &gt; plist, int abspid, std::string fname)</argsstring>
        <name>output_oscar</name>
        <param>
          <type>const std::vector&lt; <ref refid="structparticle" kindref="compound">particle</ref> &gt;</type>
          <declname>plist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>abspid</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/predefine.h" line="235" column="6" bodyfile="src/predefine.cpp" bodystart="1010" bodyend="1052" declfile="src/predefine.h" declline="235" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>PREDEFINE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PREDEFINE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;H5Cpp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;lorentz.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>HS2PP[];</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>HS2PPP[];</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>HSS2PP[];</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>type1_warned;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>type2_warned;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>type3_warned;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//=============useful<sp/>constants=============================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c2pi;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c4d9;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c1d9;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c8pi;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c16pi;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c48pi;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c16pi2;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c72pi2;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c32pi3;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c64d9pi2;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c256pi4;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fmc_to_GeV_m1;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>color=3<sp/>(3*3-1<sp/>=<sp/>8<sp/>gluons),<sp/>number<sp/>of<sp/>flavor=3,<sp/>(u,d,s<sp/>quark)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nc,<sp/>nf;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>CF;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>CA;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>CF_over_CA;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TR;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>color_count;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>prefractor<sp/>for<sp/>gluon<sp/>debye<sp/>mass<sp/>with<sp/>Boltzmann<sp/>statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mD^2<sp/>=<sp/>8\pi*(Nc+nf)*alpha_s*T^2<sp/>~<sp/>15*alpha_s*T^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>if<sp/>using<sp/>quantum<sp/>statistics,<sp/>this<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mD^2<sp/>=<sp/>4\pi/3*(Nc+nf/2)*alpha_s*T^2<sp/>~<sp/>18*alpha_s*T^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pf_g;<sp/></highlight><highlight class="comment">//<sp/>prefractor<sp/>for<sp/>gluon<sp/>self<sp/>energy^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>QCD<sp/>coupling<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>alpha_s<sp/>=<sp/>alpha_0<sp/>=<sp/>4\pi/(11Nc/3-2Nf/3)/log(Q^2/LambdaQCD^2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha0;<sp/></highlight><highlight class="comment">//<sp/>alpha_s(Q2<sp/>=<sp/>e*Lambda2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha_max;<sp/></highlight><highlight class="comment">//<sp/>alpha_s<sp/>maximum<sp/>cut</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Lambda;<sp/></highlight><highlight class="comment">//<sp/>[GeV]<sp/>Lambda<sp/>QCD<sp/>=<sp/>0.2<sp/>GeV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Lambda2;<sp/></highlight><highlight class="comment">//<sp/>[GeV^2]<sp/>Lambda<sp/>QCD<sp/>squared</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mu2_NP;<sp/></highlight><highlight class="comment">//<sp/>minimum<sp/>cut<sp/>on<sp/>Q2,<sp/>where<sp/>alpha<sp/>=<sp/>alpha_0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale;<sp/></highlight><highlight class="comment">//<sp/>mu*pi*T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>afix;<sp/></highlight><highlight class="comment">//<sp/>fixed<sp/>alphas,<sp/>-1<sp/>is<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cut;<sp/></highlight><highlight class="comment">//<sp/>separation<sp/>between<sp/>diffusion<sp/>and<sp/>scattering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Lido_Ecut;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>LPM_prefactor;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Mc;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Mb;<sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initialize_mD_and_scale(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_mD_type,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_mu,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_afix,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_theta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_cut);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha_s(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Q2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T);<sp/></highlight><highlight class="comment">//runing<sp/>coupling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>echo(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="classDebye__mass" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classDebye__mass" kindref="compound">Debye_mass</ref>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TL,<sp/>TH;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NT;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dT;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>mD2;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDebye__mass" kindref="compound">Debye_mass</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_type);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="classDebye__mass" kindref="compound">Debye_mass</ref>(){</highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>mD2;};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_mD2(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="classDebye__mass" kindref="compound">Debye_mass</ref><sp/>*<sp/>t_channel_mD2;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>splitting<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>P_q2qg(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>P_q2gq(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>P_g2gg(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>P_g2qqbar(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pid2mass(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><ref refid="structfourvec" kindref="compound">fourvec</ref><sp/>put_on_shell(<ref refid="structfourvec" kindref="compound">fourvec</ref><sp/>p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>helper<sp/>function<sp/>for<sp/>read/write<sp/>hdf5<sp/>scalar<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>H5::PredType&amp;<sp/>type();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>H5::PredType&amp;<sp/>type&lt;size_t&gt;()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H5::PredType::NATIVE_HSIZE;<sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>H5::PredType&amp;<sp/>type&lt;double&gt;()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H5::PredType::NATIVE_DOUBLE;<sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>H5::PredType&amp;<sp/>type&lt;int&gt;()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H5::PredType::NATIVE_INT;<sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hdf5_add_scalar_attr(</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>H5::Group&amp;<sp/>gp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>datatype<sp/>=<sp/>type&lt;T&gt;();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>attr<sp/>=<sp/>gp.createAttribute(name.c_str(),<sp/>datatype,<sp/>H5::DataSpace{});</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>attr.write(datatype,<sp/>&amp;value);</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hdf5_read_scalar_attr(</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>H5::Group&amp;<sp/>gp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>datatype<sp/>=<sp/>type&lt;T&gt;();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>attr<sp/>=<sp/>gp.openAttribute(name.c_str());</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>attr.read(datatype,<sp/>&amp;value);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is1to2(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prcid);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is2to2(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prcid);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is2to2_nlo(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prcid);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_classical(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prcid);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is2to3(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prcid);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPairProduction(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prcid);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign_1to2_pid(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>process_id,<sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>incoming_hard_id,<sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>&amp;<sp/>pids);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign_2to2_pid(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>process_id,<sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>incoming_hard_id,<sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>&amp;<sp/>pids);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign_2to3_pid(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>process_id,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>incoming_hard_id,<sp/></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>&amp;<sp/>pids,<sp/></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>forward);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign_2to2_color(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>process_id,<sp/></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pidA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid2,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ca,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aCa,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>C1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>aC1,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>C2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>aC2</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign_2to2_nlo_color(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>process_id,<sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pidA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid3,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ca,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aCa,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>C1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>aC1,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>C2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>aC2,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>C3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>aC3</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign_n2np1_color(</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pidA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid2,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ca,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aCa,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>C1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>aC1,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>C2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>aC2</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Fortran<sp/>style<sp/>float<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="classff" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classff" kindref="compound">ff</ref><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classff" kindref="compound">ff</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x):<sp/>value(x)<sp/>{}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;<sp/>operator&lt;&lt;<sp/>(std::ostream<sp/>&amp;<sp/>stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classff" kindref="compound">ff</ref><sp/>&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>So<sp/>that<sp/>the<sp/>log<sp/>does<sp/>not<sp/>scream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.value<sp/>==<sp/>0.)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;0.000000E+00&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exponent<sp/>=<sp/>floor(log10(std::abs(x.value)));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>base<sp/>=<sp/>x.value<sp/>/<sp/>pow(10,<sp/>exponent);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Transform<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>/=<sp/>10;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exponent<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(base<sp/>&gt;=<sp/>0){</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>buff;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buff<sp/>&lt;&lt;<sp/>std::setw(8)<sp/>&lt;&lt;<sp/>std::setprecision(6);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buff<sp/>&lt;&lt;<sp/>std::fixed<sp/>&lt;&lt;<sp/>base;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>std::setw(8)<sp/>&lt;&lt;<sp/>buff.str();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>buff;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buff<sp/>&lt;&lt;<sp/>std::setw(8)<sp/>&lt;&lt;<sp/>std::setprecision(6);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buff<sp/>&lt;&lt;<sp/>std::fixed<sp/>&lt;&lt;<sp/>base;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Checking<sp/>if<sp/>we<sp/>have<sp/>a<sp/>leading<sp/>minus<sp/>sign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>newbase<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>+<sp/>buff.str().substr(2,<sp/>buff.str().size()-1);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>std::setw(8)<sp/>&lt;&lt;<sp/>newbase;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exponent<sp/>&gt;=<sp/>0)<sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;E+&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>std::setfill(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>exponent;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;E-&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>std::setfill(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>std::abs(exponent);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal">};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_file_exist(std::string<sp/>fileName);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_process_info(std::string<sp/>p,</highlight></codeline>
<codeline lineno="190"><highlight class="normal">std::vector&lt;double&gt;<sp/>&amp;<sp/>_IM,</highlight></codeline>
<codeline lineno="191"><highlight class="normal">std::vector&lt;double&gt;<sp/>&amp;<sp/>_FM,</highlight></codeline>
<codeline lineno="192"><highlight class="normal">std::vector&lt;int&gt;<sp/>&amp;<sp/>_IT,</highlight></codeline>
<codeline lineno="193"><highlight class="normal">std::vector&lt;int&gt;<sp/>&amp;<sp/>_FT);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="structparticle" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structparticle" kindref="compound">particle</ref>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mass,<sp/>x,<sp/>p,<sp/>t,<sp/>all<sp/>in<sp/>units<sp/>of<sp/>[GeV^a]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid,<sp/>col,<sp/>acol;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>charged;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mass,<sp/>weight,<sp/>tau0,<sp/>Q0,<sp/>Q00;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_virtual;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T0,<sp/>mfp0,<sp/>Tf;<sp/></highlight><highlight class="comment">//<sp/>production<sp/>temperature,<sp/>local<sp/>mfp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcoordinate" kindref="compound">coordinate</ref><sp/>x0;<sp/></highlight><highlight class="comment">//<sp/>production<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcoordinate" kindref="compound">coordinate</ref><sp/>x;<sp/></highlight><highlight class="comment">//<sp/>current<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfourvec" kindref="compound">fourvec</ref><sp/>p0;<sp/></highlight><highlight class="comment">//<sp/>production<sp/>momentum,<sp/>after<sp/>each<sp/>radiation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfourvec" kindref="compound">fourvec</ref><sp/>p;<sp/></highlight><highlight class="comment">//<sp/>current<sp/>momentum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfourvec" kindref="compound">fourvec</ref><sp/>mother_p;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;particle&gt;<sp/>&gt;<sp/>radlist;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vcell;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">};</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="structcurrent" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcurrent" kindref="compound">current</ref>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfourvec" kindref="compound">fourvec</ref><sp/>p;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>etas;</highlight></codeline>
<codeline lineno="217"><highlight class="normal">};</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><ref refid="structparticle" kindref="compound">particle</ref><sp/>make_parton(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>anticol,<sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale,<sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfourvec" kindref="compound">fourvec</ref><sp/>pmu,<sp/></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structparticle" kindref="compound">particle</ref><sp/>&amp;<sp/>mother,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T,<sp/>std::vector&lt;double&gt;<sp/>vcell);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><ref refid="structparticle" kindref="compound">particle</ref><sp/>make_parton(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>acol,<sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale,<sp/></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfourvec" kindref="compound">fourvec</ref><sp/>pmu,<sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcoordinate" kindref="compound">coordinate</ref><sp/>x</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>formation_time(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/>tauf,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/>Q2,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idB,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idC,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfourvec" kindref="compound">fourvec</ref><sp/>pA,<sp/><ref refid="structfourvec" kindref="compound">fourvec</ref><sp/>pB,<sp/><ref refid="structfourvec" kindref="compound">fourvec</ref><sp/>pC,<sp/></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T,<sp/><ref refid="structfourvec" kindref="compound">fourvec</ref><sp/>p0);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>compute_realtime_to_propagate(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt,<sp/><ref refid="structcoordinate" kindref="compound">coordinate</ref><sp/>x,<sp/><ref refid="structfourvec" kindref="compound">fourvec</ref><sp/>p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>output_oscar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;particle&gt;<sp/>plist,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>abspid,<sp/>std::string<sp/>fname);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/predefine.h"/>
  </compounddef>
</doxygen>
