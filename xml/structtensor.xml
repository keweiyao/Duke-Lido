<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structtensor" kind="struct" language="C++" prot="public">
    <compoundname>tensor</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structtensor_1a8d9b094af539c77d4dc3bf46d78674f2" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double tensor::T[4][4]</definition>
        <argsstring>[4][4]</argsstring>
        <name>T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="142" column="10" bodyfile="src/lorentz.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structtensor_1a143cb7fb6bf39a14889c22f9311aee05" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtensor" kindref="compound">tensor</ref></type>
        <definition>static tensor tensor::unity</definition>
        <argsstring>(void)</argsstring>
        <name>unity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="136" column="17" bodyfile="src/lorentz.h" bodystart="136" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1a3b0bfea6a2a94c6b10dba376e0b21611" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t tensor::size</definition>
        <argsstring>(void)</argsstring>
        <name>size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="283" column="17" bodyfile="src/lorentz.h" bodystart="283" bodyend="283"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structtensor_1a2c4181c52a2944af7593c40e11a31527" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double tensor::tt</definition>
        <argsstring>(void) const</argsstring>
        <name>tt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="143" column="10" bodyfile="src/lorentz.h" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1abcbb7670916fcf8cdc255313b49ecb77" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double tensor::tx</definition>
        <argsstring>(void) const</argsstring>
        <name>tx</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="144" column="10" bodyfile="src/lorentz.h" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1a6fc14c39e8e350fdaa53026c6b7eb9ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double tensor::ty</definition>
        <argsstring>(void) const</argsstring>
        <name>ty</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="145" column="10" bodyfile="src/lorentz.h" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1a3c0a761862b69c419c5f1e2313caa702" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double tensor::tz</definition>
        <argsstring>(void) const</argsstring>
        <name>tz</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="146" column="10" bodyfile="src/lorentz.h" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1a3c7e57fbf6488895c7272120f2bb710a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double tensor::xt</definition>
        <argsstring>(void) const</argsstring>
        <name>xt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="148" column="10" bodyfile="src/lorentz.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1a82d03bcc5645b7efe991c63c51a6876e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double tensor::xx</definition>
        <argsstring>(void) const</argsstring>
        <name>xx</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="149" column="10" bodyfile="src/lorentz.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1a43cdd48c001e0b81d67d64d427074f52" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double tensor::xy</definition>
        <argsstring>(void) const</argsstring>
        <name>xy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="150" column="10" bodyfile="src/lorentz.h" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1a7d8e27f00e970b3c02b294185331583b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double tensor::xz</definition>
        <argsstring>(void) const</argsstring>
        <name>xz</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="151" column="10" bodyfile="src/lorentz.h" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1aaca40f200c5f9da9d0305a21f9ba2e9a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double tensor::yt</definition>
        <argsstring>(void) const</argsstring>
        <name>yt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="153" column="10" bodyfile="src/lorentz.h" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1a0df732a9453c3ef6c2a0c802e326df6b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double tensor::yx</definition>
        <argsstring>(void) const</argsstring>
        <name>yx</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="154" column="10" bodyfile="src/lorentz.h" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1a9428c96467078c0fdf617acfd82293f4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double tensor::yy</definition>
        <argsstring>(void) const</argsstring>
        <name>yy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="155" column="10" bodyfile="src/lorentz.h" bodystart="155" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1a7653dee6cd753c8c91ee8253b5085b69" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double tensor::yz</definition>
        <argsstring>(void) const</argsstring>
        <name>yz</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="156" column="10" bodyfile="src/lorentz.h" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1ad04b6ab5bc6075dad3b71001e6a99ea5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double tensor::zt</definition>
        <argsstring>(void) const</argsstring>
        <name>zt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="158" column="10" bodyfile="src/lorentz.h" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1a7e81e19719ad8f4d8edefcc557cfa431" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double tensor::zx</definition>
        <argsstring>(void) const</argsstring>
        <name>zx</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="159" column="10" bodyfile="src/lorentz.h" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1a81cec2c74acd1fd136b26d6663940804" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double tensor::zy</definition>
        <argsstring>(void) const</argsstring>
        <name>zy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="160" column="10" bodyfile="src/lorentz.h" bodystart="160" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1ab267a2be27b7f8ae0f91d03ba24b386e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double tensor::zz</definition>
        <argsstring>(void) const</argsstring>
        <name>zz</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="161" column="10" bodyfile="src/lorentz.h" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1a36b3010b5fc86e68a71c8d89bb8eca48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtensor" kindref="compound">tensor</ref></type>
        <definition>tensor tensor::operator*</definition>
        <argsstring>(U s)</argsstring>
        <name>operator*</name>
        <param>
          <type>U</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="191" column="10" bodyfile="src/lorentz.h" bodystart="191" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1afd555e4ed4db8fb3aa6ce810c4a27843" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtensor" kindref="compound">tensor</ref></type>
        <definition>tensor tensor::operator/</definition>
        <argsstring>(tensor B)</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="structtensor" kindref="compound">tensor</ref></type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="200" column="10" bodyfile="src/lorentz.h" bodystart="200" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1a5d194c2e42d07f190cef71f4e33961c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtensor" kindref="compound">tensor</ref></type>
        <definition>tensor tensor::operator*</definition>
        <argsstring>(tensor B)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structtensor" kindref="compound">tensor</ref></type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="209" column="10" bodyfile="src/lorentz.h" bodystart="209" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1acc340af5a0616427606e5a51c84a523f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtensor" kindref="compound">tensor</ref></type>
        <definition>tensor tensor::boost_to</definition>
        <argsstring>(double vx, double vy, double vz) const</argsstring>
        <name>boost_to</name>
        <param>
          <type>double</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>double</type>
          <declname>vy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>vz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="218" column="10" bodyfile="src/lorentz.h" bodystart="218" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1a646caa2e6beda94f83e5ccc4c0db65c2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtensor" kindref="compound">tensor</ref></type>
        <definition>tensor tensor::boost_back</definition>
        <argsstring>(double vx, double vy, double vz) const</argsstring>
        <name>boost_back</name>
        <param>
          <type>double</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>double</type>
          <declname>vy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>vz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="244" column="10" bodyfile="src/lorentz.h" bodystart="244" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1a60ac5df77a9dbeb377acc3364aaa0319" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtensor" kindref="compound">tensor</ref></type>
        <definition>tensor tensor::rotate_back</definition>
        <argsstring>(const fourvec p) const</argsstring>
        <name>rotate_back</name>
        <param>
          <type>const <ref refid="structfourvec" kindref="compound">fourvec</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="247" column="10" bodyfile="src/lorentz.h" bodystart="247" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1a31cd21c81a20c86a622eeac379922fed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double tensor::trace</definition>
        <argsstring>(void)</argsstring>
        <name>trace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="278" column="10" bodyfile="src/lorentz.h" bodystart="278" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1a27af043d7dec65e3a7ac3fe4759c084d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tensor::set</definition>
        <argsstring>(int i, double value)</argsstring>
        <name>set</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="281" column="8" bodyfile="src/lorentz.h" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="structtensor_1a7062baad3268a98086732fe7a38c7b16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double tensor::get</definition>
        <argsstring>(int i)</argsstring>
        <name>get</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="282" column="10" bodyfile="src/lorentz.h" bodystart="282" bodyend="282"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structtensor_1a97e8fb5391ab2f2dd7f4c3b5c2ded30a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const tensor &amp;A)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structtensor" kindref="compound">tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="163" column="10" bodyfile="src/lorentz.h" bodystart="163" bodyend="171"/>
      </memberdef>
      <memberdef kind="friend" id="structtensor_1a7ffbb12cc79ba6a926e79c8386ab5070" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structtensor" kindref="compound">tensor</ref></type>
        <definition>tensor operator+</definition>
        <argsstring>(const tensor &amp;A, const tensor &amp;B)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structtensor" kindref="compound">tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structtensor" kindref="compound">tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="172" column="17" bodyfile="src/lorentz.h" bodystart="172" bodyend="180"/>
      </memberdef>
      <memberdef kind="friend" id="structtensor_1a245cb7dd6f4e2f0214d471276989e95e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structtensor" kindref="compound">tensor</ref></type>
        <definition>tensor operator-</definition>
        <argsstring>(const tensor &amp;A, const tensor &amp;B)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structtensor" kindref="compound">tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structtensor" kindref="compound">tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lorentz.h" line="181" column="17" bodyfile="src/lorentz.h" bodystart="181" bodyend="189"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/lorentz.h" line="135" column="13" bodyfile="src/lorentz.h" bodystart="135" bodyend="284"/>
    <listofallmembers>
      <member refid="structtensor_1a646caa2e6beda94f83e5ccc4c0db65c2" prot="public" virt="non-virtual"><scope>tensor</scope><name>boost_back</name></member>
      <member refid="structtensor_1acc340af5a0616427606e5a51c84a523f" prot="public" virt="non-virtual"><scope>tensor</scope><name>boost_to</name></member>
      <member refid="structtensor_1a7062baad3268a98086732fe7a38c7b16" prot="public" virt="non-virtual"><scope>tensor</scope><name>get</name></member>
      <member refid="structtensor_1a36b3010b5fc86e68a71c8d89bb8eca48" prot="public" virt="non-virtual"><scope>tensor</scope><name>operator*</name></member>
      <member refid="structtensor_1a5d194c2e42d07f190cef71f4e33961c8" prot="public" virt="non-virtual"><scope>tensor</scope><name>operator*</name></member>
      <member refid="structtensor_1a7ffbb12cc79ba6a926e79c8386ab5070" prot="public" virt="non-virtual"><scope>tensor</scope><name>operator+</name></member>
      <member refid="structtensor_1a245cb7dd6f4e2f0214d471276989e95e" prot="public" virt="non-virtual"><scope>tensor</scope><name>operator-</name></member>
      <member refid="structtensor_1afd555e4ed4db8fb3aa6ce810c4a27843" prot="public" virt="non-virtual"><scope>tensor</scope><name>operator/</name></member>
      <member refid="structtensor_1a97e8fb5391ab2f2dd7f4c3b5c2ded30a" prot="public" virt="non-virtual"><scope>tensor</scope><name>operator&lt;&lt;</name></member>
      <member refid="structtensor_1a60ac5df77a9dbeb377acc3364aaa0319" prot="public" virt="non-virtual"><scope>tensor</scope><name>rotate_back</name></member>
      <member refid="structtensor_1a27af043d7dec65e3a7ac3fe4759c084d" prot="public" virt="non-virtual"><scope>tensor</scope><name>set</name></member>
      <member refid="structtensor_1a3b0bfea6a2a94c6b10dba376e0b21611" prot="public" virt="non-virtual"><scope>tensor</scope><name>size</name></member>
      <member refid="structtensor_1a8d9b094af539c77d4dc3bf46d78674f2" prot="public" virt="non-virtual"><scope>tensor</scope><name>T</name></member>
      <member refid="structtensor_1a31cd21c81a20c86a622eeac379922fed" prot="public" virt="non-virtual"><scope>tensor</scope><name>trace</name></member>
      <member refid="structtensor_1a2c4181c52a2944af7593c40e11a31527" prot="public" virt="non-virtual"><scope>tensor</scope><name>tt</name></member>
      <member refid="structtensor_1abcbb7670916fcf8cdc255313b49ecb77" prot="public" virt="non-virtual"><scope>tensor</scope><name>tx</name></member>
      <member refid="structtensor_1a6fc14c39e8e350fdaa53026c6b7eb9ad" prot="public" virt="non-virtual"><scope>tensor</scope><name>ty</name></member>
      <member refid="structtensor_1a3c0a761862b69c419c5f1e2313caa702" prot="public" virt="non-virtual"><scope>tensor</scope><name>tz</name></member>
      <member refid="structtensor_1a143cb7fb6bf39a14889c22f9311aee05" prot="public" virt="non-virtual"><scope>tensor</scope><name>unity</name></member>
      <member refid="structtensor_1a3c7e57fbf6488895c7272120f2bb710a" prot="public" virt="non-virtual"><scope>tensor</scope><name>xt</name></member>
      <member refid="structtensor_1a82d03bcc5645b7efe991c63c51a6876e" prot="public" virt="non-virtual"><scope>tensor</scope><name>xx</name></member>
      <member refid="structtensor_1a43cdd48c001e0b81d67d64d427074f52" prot="public" virt="non-virtual"><scope>tensor</scope><name>xy</name></member>
      <member refid="structtensor_1a7d8e27f00e970b3c02b294185331583b" prot="public" virt="non-virtual"><scope>tensor</scope><name>xz</name></member>
      <member refid="structtensor_1aaca40f200c5f9da9d0305a21f9ba2e9a" prot="public" virt="non-virtual"><scope>tensor</scope><name>yt</name></member>
      <member refid="structtensor_1a0df732a9453c3ef6c2a0c802e326df6b" prot="public" virt="non-virtual"><scope>tensor</scope><name>yx</name></member>
      <member refid="structtensor_1a9428c96467078c0fdf617acfd82293f4" prot="public" virt="non-virtual"><scope>tensor</scope><name>yy</name></member>
      <member refid="structtensor_1a7653dee6cd753c8c91ee8253b5085b69" prot="public" virt="non-virtual"><scope>tensor</scope><name>yz</name></member>
      <member refid="structtensor_1ad04b6ab5bc6075dad3b71001e6a99ea5" prot="public" virt="non-virtual"><scope>tensor</scope><name>zt</name></member>
      <member refid="structtensor_1a7e81e19719ad8f4d8edefcc557cfa431" prot="public" virt="non-virtual"><scope>tensor</scope><name>zx</name></member>
      <member refid="structtensor_1a81cec2c74acd1fd136b26d6663940804" prot="public" virt="non-virtual"><scope>tensor</scope><name>zy</name></member>
      <member refid="structtensor_1ab267a2be27b7f8ae0f91d03ba24b386e" prot="public" virt="non-virtual"><scope>tensor</scope><name>zz</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
