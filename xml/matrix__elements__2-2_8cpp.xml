<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="matrix__elements__2-2_8cpp" kind="file" language="C++">
    <compoundname>matrix_elements_2-2.cpp</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">iostream</includes>
    <includes refid="predefine_8h" local="yes">predefine.h</includes>
    <includes refid="matrix__elements_8h" local="yes">matrix_elements.h</includes>
    <includes refid="lorentz_8h" local="yes">lorentz.h</includes>
    <includes refid="simpleLogger_8h" local="yes">simpleLogger.h</includes>
    <incdepgraph>
      <node id="8">
        <label>iomanip</label>
      </node>
      <node id="4">
        <label>predefine.h</label>
        <link refid="predefine_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>matrix_elements.h</label>
        <link refid="matrix__elements_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cmath</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="11">
        <label>lorentz.h</label>
        <link refid="lorentz_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>boost/log/trivial.hpp</label>
      </node>
      <node id="10">
        <label>fstream</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="9">
        <label>sstream</label>
      </node>
      <node id="1">
        <label>src/matrix_elements_2-2.cpp</label>
        <link refid="matrix__elements__2-2_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>cstdlib</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="16">
        <label>boost/log/sources/global_logger_storage.hpp</label>
      </node>
      <node id="14">
        <label>simpleLogger.h</label>
        <link refid="simpleLogger_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>H5Cpp.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="matrix__elements__2-2_8cpp_1ae578e5bbddc616e8709d8edd0c5a418f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double M2_gg2gg</definition>
        <argsstring>(const double t, void *params)</argsstring>
        <name>M2_gg2gg</name>
        <param>
          <type>const double</type>
          <declname>t</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matrix_elements_2-2.cpp" line="13" column="8" bodyfile="src/matrix_elements_2-2.cpp" bodystart="13" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="matrix__elements__2-2_8cpp_1ab7e8f70e0c6868230cdae3904a0e8795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dX_gg2gg</definition>
        <argsstring>(const double t, void *params)</argsstring>
        <name>dX_gg2gg</name>
        <param>
          <type>const double</type>
          <declname>t</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matrix_elements_2-2.cpp" line="28" column="8" bodyfile="src/matrix_elements_2-2.cpp" bodystart="28" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="matrix__elements__2-2_8cpp_1af50b3c54205048ad1b85f0c0499ef9de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double M2_gq2gq</definition>
        <argsstring>(const double t, void *params)</argsstring>
        <name>M2_gq2gq</name>
        <param>
          <type>const double</type>
          <declname>t</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>g(h)1 + q(s)2 <ndash/>only 1/t^2 term--&gt; g3 + q4 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matrix_elements_2-2.cpp" line="35" column="8" bodyfile="src/matrix_elements_2-2.cpp" bodystart="35" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="matrix__elements__2-2_8cpp_1acbb004ea33ca2446ece85f067c78099a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dX_gq2gq</definition>
        <argsstring>(const double t, void *params)</argsstring>
        <name>dX_gq2gq</name>
        <param>
          <type>const double</type>
          <declname>t</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matrix_elements_2-2.cpp" line="46" column="8" bodyfile="src/matrix_elements_2-2.cpp" bodystart="46" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="matrix__elements__2-2_8cpp_1ac850461460de603a595c6fc876116850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double M2_qq2qq</definition>
        <argsstring>(const double t, void *params)</argsstring>
        <name>M2_qq2qq</name>
        <param>
          <type>const double</type>
          <declname>t</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>q(h)1 + q(s)2 <ndash/>only-t--&gt; q3 + q4, m1=m3, m2=m4=0 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matrix_elements_2-2.cpp" line="54" column="8" bodyfile="src/matrix_elements_2-2.cpp" bodystart="54" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="matrix__elements__2-2_8cpp_1a293dc69c87d63f97023c66aba1222a02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dX_qq2qq</definition>
        <argsstring>(const double t, void *params)</argsstring>
        <name>dX_qq2qq</name>
        <param>
          <type>const double</type>
          <declname>t</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matrix_elements_2-2.cpp" line="65" column="8" bodyfile="src/matrix_elements_2-2.cpp" bodystart="65" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="matrix__elements__2-2_8cpp_1a70b50dca794b6f96ad1712cec87200f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double M2_qg2qg</definition>
        <argsstring>(const double t, void *params)</argsstring>
        <name>M2_qg2qg</name>
        <param>
          <type>const double</type>
          <declname>t</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>q(h)1 + g(s)2 <ndash/>only-t--&gt; q3 + g4, m1=m3, m2=m4=0 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matrix_elements_2-2.cpp" line="73" column="8" bodyfile="src/matrix_elements_2-2.cpp" bodystart="73" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="matrix__elements__2-2_8cpp_1a038ddf0c61062165873595c7c69c064e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dX_qg2qg</definition>
        <argsstring>(const double t, void *params)</argsstring>
        <name>dX_qg2qg</name>
        <param>
          <type>const double</type>
          <declname>t</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matrix_elements_2-2.cpp" line="85" column="8" bodyfile="src/matrix_elements_2-2.cpp" bodystart="85" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="matrix__elements__2-2_8cpp_1a476018048b4b8ba00bd3ef9f76840bba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double M2_qg2qg_stu</definition>
        <argsstring>(const double t, void *params)</argsstring>
        <name>M2_qg2qg_stu</name>
        <param>
          <type>const double</type>
          <declname>t</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>q(h)1 + g(s)2 <ndash/>s+u+t--&gt; q3 + g4, m1=m3, m2=m4=0 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matrix_elements_2-2.cpp" line="92" column="8" bodyfile="src/matrix_elements_2-2.cpp" bodystart="92" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="matrix__elements__2-2_8cpp_1a74c890669694c68c838920364324fb4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dX_qg2qg_stu</definition>
        <argsstring>(const double t, void *params)</argsstring>
        <name>dX_qg2qg_stu</name>
        <param>
          <type>const double</type>
          <declname>t</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matrix_elements_2-2.cpp" line="113" column="8" bodyfile="src/matrix_elements_2-2.cpp" bodystart="113" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="matrix__elements__2-2_8cpp_1a6ba2dfc280d2ee7f0fa94148e353269f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double M2_gg2qqbar</definition>
        <argsstring>(const double t, void *params)</argsstring>
        <name>M2_gg2qqbar</name>
        <param>
          <type>const double</type>
          <declname>t</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matrix_elements_2-2.cpp" line="120" column="8" bodyfile="src/matrix_elements_2-2.cpp" bodystart="120" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="matrix__elements__2-2_8cpp_1af443f4e799dad51e603de1aa659afa86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dX_gg2qqbar</definition>
        <argsstring>(const double t, void *params)</argsstring>
        <name>dX_gg2qqbar</name>
        <param>
          <type>const double</type>
          <declname>t</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matrix_elements_2-2.cpp" line="142" column="8" bodyfile="src/matrix_elements_2-2.cpp" bodystart="142" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="matrix__elements__2-2_8cpp_1a61d87bfedc169aa09c8173879a209237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double M2_qqbar2qqbar_diff</definition>
        <argsstring>(const double t, void *params)</argsstring>
        <name>M2_qqbar2qqbar_diff</name>
        <param>
          <type>const double</type>
          <declname>t</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matrix_elements_2-2.cpp" line="150" column="8" bodyfile="src/matrix_elements_2-2.cpp" bodystart="150" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="matrix__elements__2-2_8cpp_1ae1beaada3687755a26958573432deaca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dX_qqbar2qqbar_diff</definition>
        <argsstring>(const double t, void *params)</argsstring>
        <name>dX_qqbar2qqbar_diff</name>
        <param>
          <type>const double</type>
          <declname>t</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/matrix_elements_2-2.cpp" line="165" column="8" bodyfile="src/matrix_elements_2-2.cpp" bodystart="165" bodyend="169"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;predefine.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;matrix_elements.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;lorentz.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;simpleLogger.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameters:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>s,<sp/>tcut,<sp/>T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>masses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>g(h)1<sp/>+<sp/>g(s)2<sp/>--only-t--&gt;<sp/>g3<sp/>+<sp/>g4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M2_gg2gg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>params){</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(params);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>p[0],<sp/>tcut<sp/>=<sp/>p[1],<sp/>Temp<sp/>=<sp/>p[2];</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//double<sp/>m1=p[3],<sp/>m2=p[4],<sp/>m3=p[5],<sp/>m4=p[6];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t&gt;tcut)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Q2s<sp/>=<sp/>s,<sp/>Q2t<sp/>=<sp/>t,<sp/>Q2u<sp/>=<sp/>-<sp/>s<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>At<sp/>=<sp/>alpha_s(Q2t,<sp/>Temp);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>c72pi2*At*At*(-Q2s*Q2u/Q2t/Q2t);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>should<sp/>also<sp/>be<sp/>a<sp/>u<sp/>channel<sp/>divergence<sp/>term,<sp/>but<sp/>it<sp/>is<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>accounted<sp/>by<sp/>taking<sp/>the<sp/>full<sp/>space-space<sp/>without<sp/>identical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>boson<sp/>constrain<sp/>into<sp/>account.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0.)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dX_gg2gg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>params){</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(params);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>p[0];</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M2_gg2gg(t,<sp/>params)/c16pi/s/s;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M2_gq2gq(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>params){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(params);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>p[0],<sp/>tcut<sp/>=<sp/>p[1],<sp/>Temp<sp/>=<sp/>p[2];</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//double<sp/>m1=p[3],<sp/>m2=p[4],<sp/>m3=p[5],<sp/>m4=p[6];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t&gt;tcut)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Q2s<sp/>=<sp/>s,<sp/>Q2t<sp/>=<sp/>t,<sp/>Q2u<sp/>=<sp/>-<sp/>s<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>At<sp/>=<sp/>alpha_s(Q2t,<sp/>Temp);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>At*At*c16pi2*(Q2s*Q2s+Q2u*Q2u)/(Q2t*Q2t);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0.)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dX_gq2gq(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>params){</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(params);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>p[0];</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M2_gq2gq(t,<sp/>params)/c16pi/s/s;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M2_qq2qq(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>params){</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(params);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>p[0],<sp/>tcut<sp/>=<sp/>p[1],<sp/>Temp<sp/>=<sp/>p[2];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m1sq<sp/>=<sp/>std::pow(p[3],<sp/>2);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t&gt;tcut)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Q2s<sp/>=<sp/>s<sp/>-<sp/>m1sq,<sp/>Q2t<sp/>=<sp/>t,<sp/>Q2u<sp/>=<sp/>m1sq<sp/>-<sp/>s<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>At<sp/>=<sp/>alpha_s(Q2t,<sp/>Temp);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>c64d9pi2*At*At*(Q2u*Q2u<sp/>+<sp/>Q2s*Q2s<sp/>+<sp/>2.*m1sq*t)/Q2t/Q2t;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0.)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dX_qq2qq(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>params){</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(params);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>p[0],<sp/>m1sq<sp/>=<sp/>std::pow(p[3],<sp/>2);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M2_qq2qq(t,<sp/>params)/c16pi/std::pow(s-m1sq,<sp/>2);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M2_qg2qg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(params);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>p[0],<sp/>tcut<sp/>=<sp/>p[1],<sp/>Temp<sp/>=<sp/>p[2];</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m1sq<sp/>=<sp/>std::pow(p[3],<sp/>2);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//double<sp/>m2=p[4],<sp/>m3=p[5],<sp/>m4=p[6];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t&gt;tcut)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Q2s<sp/>=<sp/>s<sp/>-<sp/>m1sq,<sp/>Q2t<sp/>=<sp/>t,<sp/>Q2u<sp/>=<sp/>m1sq<sp/>-<sp/>s<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>At<sp/>=<sp/>alpha_s(Q2t,<sp/>Temp);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>At*At*c16pi2*(Q2s*Q2s+Q2u*Q2u)/(Q2t*Q2t);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0.)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dX_qg2qg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>params){</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(params);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>p[0],<sp/>m1sq<sp/>=<sp/>std::pow(p[3],<sp/>2);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M2_qg2qg(t,<sp/>params)/c16pi/std::pow(s-m1sq,<sp/>2);</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M2_qg2qg_stu(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>params){</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(params);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>p[0],<sp/>tcut<sp/>=<sp/>p[1],<sp/>Temp<sp/>=<sp/>p[2];</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m1sq<sp/>=<sp/>std::pow(p[3],<sp/>2);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//double<sp/>m2=p[4],<sp/>m3=p[5],<sp/>m4=p[6];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Q2s<sp/>=<sp/>s<sp/>-<sp/>m1sq,<sp/>Q2t<sp/>=<sp/>t,<sp/>Q2u<sp/>=<sp/>m1sq<sp/>-<sp/>s<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Q2t&gt;tcut)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Q2u&gt;tcut)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>At<sp/>=<sp/>alpha_s(Q2t,<sp/>Temp),</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Au<sp/>=<sp/>alpha_s(Q2u,<sp/>Temp),</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>As<sp/>=<sp/>alpha_s(Q2s,<sp/>Temp);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>2.*At*At<sp/>*<sp/>Q2s*(-Q2u)/Q2t/Q2t<sp/></highlight><highlight class="comment">//<sp/>t*t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>+<sp/>c4d9*As*As*(<sp/>Q2s*(-Q2u)<sp/>+<sp/>2.*m1sq*(Q2s<sp/>+<sp/>2.*m1sq)<sp/>)/std::pow(Q2s,<sp/>2)<sp/></highlight><highlight class="comment">//<sp/>s*s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>+<sp/>c4d9*Au*Au*(<sp/>Q2s*(-Q2u)<sp/>+<sp/>2.*m1sq*(Q2u<sp/>+<sp/>2.*m1sq)<sp/>)/std::pow(Q2u,<sp/>2)<sp/></highlight><highlight class="comment">//<sp/>u*u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>+<sp/>c1d9*As*Au*m1sq*(4.*m1sq<sp/>-<sp/>t)/Q2s/(-Q2u)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>s*u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>+<sp/>At*As*(<sp/>Q2s*(-Q2u)<sp/>+<sp/>m1sq*(Q2s<sp/>-<sp/>Q2u)<sp/>)/Q2t/Q2s<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>t*s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>At*Au*(<sp/>Q2s*(-Q2u)<sp/>-<sp/>m1sq*(Q2s<sp/>-<sp/>Q2u)<sp/>)/Q2t/(-Q2u);<sp/></highlight><highlight class="comment">//<sp/>t*u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0.)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result*c16pi2;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dX_qg2qg_stu(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>params){</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(params);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>p[0],<sp/>m1sq<sp/>=<sp/>std::pow(p[3],<sp/>2);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M2_qg2qg_stu(t,<sp/>params)/c16pi/std::pow(s-m1sq,<sp/>2);</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>g(h)1<sp/>+<sp/>g(s)2<sp/>--s+t+u--&gt;<sp/>q3<sp/>+<sp/>qbar4,<sp/>m1=m2=0,<sp/>m3=m4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M2_gg2qqbar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>params){</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(params);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>p[0],<sp/>tcut<sp/>=<sp/>p[1],<sp/>Temp<sp/>=<sp/>p[2];</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m3sq<sp/>=<sp/>std::pow(p[5],<sp/>2);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//double<sp/>m1<sp/>=p[3],<sp/>m2=p[4],<sp/>m4=p[6];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mg2<sp/>=<sp/>t_channel_mD2-&gt;get_mD2(Temp)/2.;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>S<sp/>=<sp/>s+mg2;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>t<sp/>-<sp/>m3sq-mg2;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>-<sp/>S<sp/>-<sp/>T-mg2;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>coupling<sp/>constant<sp/>for<sp/>each<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>As<sp/>=<sp/>alpha_s(S,<sp/>Temp);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>At<sp/>=<sp/>alpha_s(T,<sp/>Temp);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Au<sp/>=<sp/>alpha_s(U,<sp/>Temp);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::pow(M_PI,2)<sp/>*<sp/>(</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>12.*U*T/S/S*As*As<sp/></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/>+<sp/>8./3.*(U/T+T/U)*At*Au</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/>-<sp/>16./3.*m3sq*((2.*m3sq+T)/T/T*At*At<sp/>+<sp/>(2*m3sq+U)/U/U*Au*Au)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/>+<sp/>6.*(T+U)/S*As*As</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/>+<sp/>6.*m3sq/S*std::pow(T-U,2)/T/U*At*Au<sp/></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/>-<sp/>2./3.*m3sq*(S-4.*m3sq)/T/U*At*Au</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dX_gg2qqbar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>params){</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(params);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>p[0];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M2_gg2qqbar(t,<sp/>params)/c16pi/std::pow(s,<sp/>2);</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/>q(h)1<sp/>+<sp/>qbar(s)2<sp/>--s+t+u--&gt;<sp/>q3<sp/>+<sp/>qbar4,<sp/>m1=m2=0,<sp/>m3=m4,<sp/>different<sp/>flavor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M2_qqbar2qqbar_diff(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>params){</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(params);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>p[0],<sp/>tcut<sp/>=<sp/>p[1],<sp/>Temp<sp/>=<sp/>p[2];</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m3sq<sp/>=<sp/>std::pow(p[5],<sp/>2);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//double<sp/>m1<sp/>=p[3],<sp/>m2=p[4],<sp/>m4=p[6];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mg2<sp/>=<sp/>t_channel_mD2-&gt;get_mD2(Temp)/2.;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>S<sp/>=<sp/>s+mg2;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>t<sp/>-<sp/>m3sq-mg2;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>-<sp/>S<sp/>-<sp/>T-mg2;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>coupling<sp/>constant<sp/>for<sp/>each<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>As<sp/>=<sp/>alpha_s(S,<sp/>Temp);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>64./9.*std::pow(M_PI*As,2)*(T*T+U*U+2.*m3sq*S)/std::pow(S,2);</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dX_qqbar2qqbar_diff(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>params){</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(params);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>p[0];</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M2_qqbar2qqbar_diff(t,<sp/>params)/c16pi/std::pow(s,<sp/>2);</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/matrix_elements_2-2.cpp"/>
  </compounddef>
</doxygen>
